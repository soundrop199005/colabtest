# -*- coding: utf-8 -*-
"""Level1_TestModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L2Kv_xSzl1JdHPmj_jZs_r_uGJ-2z4CF
"""



#General imports
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import progressbar
from __future__ import print_function
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import normalize
from sklearn.decomposition import PCA
import gc
# Keras imports
import keras
import random
from keras.preprocessing.image import load_img
from keras.models import Sequential, Model
from keras.optimizers import *
from tensorflow.keras.utils import to_categorical
import keras.backend as K
import tensorflow as tf
# application (model) imports
from keras import applications
#from keras.applications.inception_v3 import preprocess_input
from keras.layers import Dense
import time
import math
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

def model_evaluate(model_path):
  # import data
  (x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
  assert x_train.shape == (50000, 32, 32, 3)
  assert x_test.shape == (10000, 32, 32, 3)
  assert y_train.shape == (50000, 1)
  assert y_test.shape == (10000, 1)
  # load the best model
  trained_model = tf.keras.models.load_model(model_path)
  trained_model.summary()
  # model evaluation
  # get the prediction labels by finding the position for the biggest probability
  start_time= time.time()
  y_pred_prob = trained_model.predict(x_test)
  y_pred = np.argmax(y_pred_prob,axis =1)
  stop_time=time.time()
  duration =stop_time - start_time
  msec_per = duration*(10**6)/len(y_test)
  print('The inference time of the model in milliseconds per image per CPU is %.9f'%(msec_per))
  classes = ['plane', 'car', 'bird', 'cat','deer', 'dog', 'frog', 'horse', 'ship', 'truck']
  print(classification_report(y_test, y_pred,target_names=classes))
  # confusion matrix to display
  cm = confusion_matrix(y_test, y_pred)
  disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels= classes)
  disp.plot()